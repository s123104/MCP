# 生產環境配置 - 高可用性和安全性
version: '3.8'

services:
  # GitHub MCP 服務器 - 生產配置
  github-mcp:
    image: mcp/github:latest
    container_name: github-mcp-prod
    environment:
      - GITHUB_TOKEN_FILE=/run/secrets/github_token
    stdin_open: true
    tty: true
    restart: always
    read_only: true
    tmpfs:
      - /tmp:size=100M,mode=1777
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
    user: "1000:1000"
    mem_limit: 256m
    mem_reservation: 128m
    cpus: 0.5
    networks:
      - mcp-backend
    secrets:
      - github_token
    labels:
      - "mcp.env=production"
      - "mcp.server=github"
      - "mcp.version=1.0"
    healthcheck:
      test: ["CMD", "pgrep", "-f", "node"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "mcp.server,mcp.env"

  # 時間工具服務器 - 生產配置
  time-mcp:
    image: mcp/time:latest
    container_name: time-mcp-prod
    stdin_open: true
    tty: true
    restart: always
    read_only: true
    tmpfs:
      - /tmp:size=50M,mode=1777
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined
    cap_drop:
      - ALL
    user: "1000:1000"
    mem_limit: 128m
    mem_reservation: 64m 
    cpus: 0.2
    networks:
      - mcp-backend
    labels:
      - "mcp.env=production"
      - "mcp.server=time"
      - "mcp.version=1.0"
    healthcheck:
      test: ["CMD", "pgrep", "-f", "node"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Puppeteer 服務器 - 生產配置
  puppeteer-mcp:
    image: mcp/puppeteer:latest
    container_name: puppeteer-mcp-prod
    environment:
      - DOCKER_CONTAINER=true
      - NODE_ENV=production
    stdin_open: true
    tty: true
    restart: always
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SYS_ADMIN  # Puppeteer 需要
    user: "1000:1000"
    mem_limit: 1g
    mem_reservation: 512m
    cpus: 1.0
    networks:
      - mcp-backend
    shm_size: 2gb
    labels:
      - "mcp.env=production"
      - "mcp.server=puppeteer"
      - "mcp.version=1.0"
    healthcheck:
      test: ["CMD", "pgrep", "-f", "node"]
      interval: 60s
      timeout: 30s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"

  # PostgreSQL MCP 服務器 - 生產配置
  postgres-mcp:
    image: mcp/postgres:latest
    container_name: postgres-mcp-prod
    environment:
      - POSTGRES_URL_FILE=/run/secrets/postgres_url
    stdin_open: true
    tty: true
    restart: always
    read_only: true
    tmpfs:
      - /tmp:size=100M,mode=1777
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "1000:1000"
    mem_limit: 512m
    mem_reservation: 256m
    cpus: 0.5
    networks:
      - mcp-data
    secrets:
      - postgres_url
    labels:
      - "mcp.env=production"
      - "mcp.server=postgres"
      - "mcp.version=1.0"
    healthcheck:
      test: ["CMD", "pgrep", "-f", "node"]
      interval: 30s
      timeout: 15s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "15m"
        max-file: "3"

  # Nginx 反向代理 (如果需要 HTTP 端點)
  nginx-proxy:
    image: nginx:alpine
    container_name: nginx-proxy-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - mcp-frontend
    labels:
      - "mcp.env=production"
      - "mcp.type=proxy"
    restart: always
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 監控和警報系統
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - mcp-frontend
    labels:
      - "mcp.env=production"
      - "mcp.type=monitoring"
    restart: always

  # Grafana 儀表板
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-prod
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - mcp-frontend
    secrets:
      - grafana_password
    labels:
      - "mcp.env=production"
      - "mcp.type=monitoring"
    restart: always
    user: "472"

  # 日誌聚合
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: fluentd-prod
    volumes:
      - ./logging/fluent.conf:/fluentd/etc/fluent.conf:ro
      - fluentd_logs:/fluentd/log
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - mcp-backend
    labels:
      - "mcp.env=production"
      - "mcp.type=logging"
    restart: always

  network-policy:
    image: alpine/socat
    command: ["sh", "-c", "iptables -I DOCKER-USER -s 172.20.0.0/24 -d 172.21.0.0/24 -j ACCEPT && iptables -I DOCKER-USER -j DROP"]
    network_mode: host
    privileged: true
    volumes:
      - /etc/iptables:/etc/iptables

networks:
  mcp-frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.enable_icc: "false"
    labels:
      - "mcp.env=production"

  mcp-backend:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.21.0.0/24
          gateway: 172.21.0.1
    labels:
      - "mcp.env=production"

  mcp-data:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.22.0.0/24
          gateway: 172.22.0.1
    labels:
      - "mcp.env=production"

volumes:
  prometheus_data:
    driver: local
    labels:
      - "mcp.env=production"
      - "mcp.type=monitoring"
  
  grafana_data:
    driver: local
    labels:
      - "mcp.env=production"
      - "mcp.type=monitoring"
  
  nginx_logs:
    driver: local
    labels:
      - "mcp.env=production"
      - "mcp.type=logs"
  
  fluentd_logs:
    driver: local
    labels:
      - "mcp.env=production"
      - "mcp.type=logs"

secrets:
  github_token:
    file: ./secrets/github_token.txt
  postgres_url:
    file: ./secrets/postgres_url.txt
  grafana_password:
    file: ./secrets/grafana_password.txt

# 生產環境配置覆蓋
configs:
  nginx_config:
    file: ./nginx/nginx.conf
  prometheus_config:
    file: ./monitoring/prometheus.yml
